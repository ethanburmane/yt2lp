#!/bin/bash

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

# header
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}YT2LP Setup${NC}"
echo -e "${GREEN}========================================${NC}"
echo

# check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo -e "${RED}Error: Node.js is not installed.${NC}"
    echo -e "Please install Node.js first: https://nodejs.org/"
    exit 1
fi

# check if npm is installed
if ! command -v npm &> /dev/null; then
    echo -e "${RED}Error: npm is not installed.${NC}"
    echo -e "Please install npm first."
    exit 1
fi

# check if yt-dlp is installed
if command -v yt-dlp &> /dev/null; then
    echo -e "${GREEN}✓${NC} yt-dlp found"
else
    echo -e "${YELLOW}Warning: yt-dlp is not installed.${NC}"
    echo -e "Would you like to install yt-dlp now? (y/n)"
    read -r answer
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        if command -v brew &> /dev/null; then
            echo "Installing yt-dlp using Homebrew..."
            brew install yt-dlp
        elif command -v apt-get &> /dev/null; then
            echo "Installing yt-dlp using apt..."
            sudo apt-get update
            sudo apt-get install -y python3-pip
            sudo pip3 install yt-dlp
        else
            echo -e "${RED}Error: Could not determine how to install yt-dlp.${NC}"
            echo "Please install yt-dlp manually and run this script again."
            exit 1
        fi
    else
        echo -e "${YELLOW}Warning: The tool won't work without yt-dlp.${NC}"
        echo "Please install one of them manually before using the tool."
    fi
fi

# check if ffmpeg is installed
if ! command -v ffmpeg &> /dev/null; then
    echo -e "${YELLOW}Warning: ffmpeg is not installed.${NC}"
    echo -e "Would you like to install ffmpeg now? (y/n)"
    read -r answer
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        if command -v brew &> /dev/null; then
            echo "Installing ffmpeg using Homebrew..."
            brew install ffmpeg
        elif command -v apt-get &> /dev/null; then
            echo "Installing ffmpeg using apt..."
            sudo apt-get update
            sudo apt-get install -y ffmpeg
        else
            echo -e "${RED}Error: Could not determine how to install ffmpeg.${NC}"
            echo "Please install ffmpeg manually and run this script again."
            exit 1
        fi
    else
        echo -e "${YELLOW}Warning: The tool won't work without ffmpeg.${NC}"
        echo "Please install ffmpeg manually before using the tool."
    fi
else
    echo -e "${GREEN}✓${NC} ffmpeg found"
fi

echo
echo -e "${GREEN}Installing npm dependencies...${NC}"
npm install

# make script executable
echo -e "${GREEN}Making yt2lp.js executable...${NC}"
chmod +x yt2lp.js

# check if yt2lp is already installed globally
if npm list -g yt2lp &> /dev/null; then
    echo -e "${YELLOW}yt2lp is already installed globally.${NC}"
    echo -e "${YELLOW}Uninstalling previous version...${NC}"
    npm unlink -g yt2lp 2>/dev/null || npm uninstall -g yt2lp
    echo -e "${GREEN}✓${NC} Previous version uninstalled"
fi

# install the tool globally
echo -e "${GREEN}Installing yt2lp globally...${NC}"
npm link

# check if YT2LP_OUTPUT_DIR is already set
if [ -n "$YT2LP_OUTPUT_DIR" ]; then
    echo -e "${GREEN}✓${NC} YT2LP_OUTPUT_DIR is already set to: ${YELLOW}$YT2LP_OUTPUT_DIR${NC}"
    echo -e "Would you like to change it? (y/n)"
    read -r change_dir
    if [[ ! "$change_dir" =~ ^[Yy]$ ]]; then
        echo -e "${GREEN}Keeping current output directory.${NC}"
    else
        unset YT2LP_OUTPUT_DIR
    fi
fi

# prompt for output directory if not set or user wants to change
if [ -z "$YT2LP_OUTPUT_DIR" ]; then
    echo -e "${YELLOW}YT2LP requires an output directory for saving MP3 albums.${NC}"
    echo -e "Please enter the full path where you want your MP3 albums saved:"
    echo -e "(Example: /Users/yourname/Music/YT2LP or ~/Music/YT2LP)"
    echo
    read -r output_dir
    
    # expand tilde to home directory if used
    output_dir="${output_dir/#\~/$HOME}"
    
    # validate directory
    if [ -z "$output_dir" ]; then
        echo -e "${RED}Error: No directory specified.${NC}"
        exit 1
    fi
    
    # create directory if it doesn't exist
    if [ ! -d "$output_dir" ]; then
        echo -e "${YELLOW}Directory doesn't exist. Creating: $output_dir${NC}"
        mkdir -p "$output_dir"
        if [ $? -ne 0 ]; then
            echo -e "${RED}Error: Could not create directory.${NC}"
            exit 1
        fi
    fi
    
    # check if directory is writable
    if [ ! -w "$output_dir" ]; then
        echo -e "${RED}Error: Directory is not writable: $output_dir${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}✓${NC} Directory validated: ${YELLOW}$output_dir${NC}"
    echo
    
    # determine shell and config file
    SHELL_NAME=$(basename "$SHELL")
    case "$SHELL_NAME" in
        "bash")
            CONFIG_FILE="$HOME/.bashrc"
            if [[ "$OSTYPE" == "darwin"* ]]; then
                CONFIG_FILE="$HOME/.bash_profile"
            fi
            ;;
        "zsh")
            CONFIG_FILE="$HOME/.zshrc"
            ;;
        "fish")
            CONFIG_FILE="$HOME/.config/fish/config.fish"
            ;;
        *)
            CONFIG_FILE="$HOME/.profile"
            ;;
    esac
    
    echo -e "${YELLOW}Setting up environment variable...${NC}"
    echo
    echo -e "I need to add the following line to your shell configuration:"
    echo -e "${BLUE}export YT2LP_OUTPUT_DIR=\"$output_dir\"${NC}"
    echo
    echo -e "Shell config file: ${YELLOW}$CONFIG_FILE${NC}"
    echo
    echo -e "Would you like me to add this automatically? (y/n)"
    read -r add_env
    
    if [[ "$add_env" =~ ^[Yy]$ ]]; then
        # check if the variable is already in the config file
        if grep -q "YT2LP_OUTPUT_DIR" "$CONFIG_FILE" 2>/dev/null; then
            echo -e "${YELLOW}YT2LP_OUTPUT_DIR already exists in $CONFIG_FILE${NC}"
            echo -e "Updating the existing entry..."
            # create a backup
            cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"
            # remove old entry and add new one
            sed -i.tmp '/YT2LP_OUTPUT_DIR/d' "$CONFIG_FILE" && rm "${CONFIG_FILE}.tmp" 2>/dev/null || sed -i '/YT2LP_OUTPUT_DIR/d' "$CONFIG_FILE"
        fi
        
        echo "export YT2LP_OUTPUT_DIR=\"$output_dir\"" >> "$CONFIG_FILE"
        echo -e "${GREEN}✓${NC} Environment variable added to $CONFIG_FILE"
        
        # set for current session
        export YT2LP_OUTPUT_DIR="$output_dir"
        echo -e "${GREEN}✓${NC} Environment variable set for current session"
        
    else
        echo -e "${YELLOW}Please add the following line to your shell configuration file manually:${NC}"
        echo -e "${BLUE}export YT2LP_OUTPUT_DIR=\"$output_dir\"${NC}"
        echo
        echo -e "Then restart your terminal or run: ${YELLOW}source $CONFIG_FILE${NC}"
        echo
        echo -e "${YELLOW}For current session, run:${NC}"
        echo -e "${BLUE}export YT2LP_OUTPUT_DIR=\"$output_dir\"${NC}"
        
        # set for current session anyway
        export YT2LP_OUTPUT_DIR="$output_dir"
    fi
fi

echo
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Installation Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo
echo -e "✓ YT2LP is installed and ready to use!"
echo -e "✓ Output directory: ${YELLOW}$YT2LP_OUTPUT_DIR${NC}"
echo
echo -e "Usage:"
echo -e "  ${YELLOW}yt2lp [youtube-url]${NC}     - Covert YouTube video to an album"
echo -e "  ${YELLOW}yt2lp --help${NC}            - Show help information"
echo
if [[ "$add_env" =~ ^[Nn]$ ]] && [ -z "${YT2LP_OUTPUT_DIR_ORIGINAL:-}" ]; then
    echo -e "${YELLOW}Note: Remember to restart your terminal or source your shell config file${NC}"
    echo -e "${YELLOW}for the environment variable to persist in new sessions.${NC}"
    echo
fi